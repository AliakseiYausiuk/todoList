{"version":3,"sources":["AddItemFrom.tsx","EditableSpan.tsx","componets/Todolist/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemFrom","props","useState","title","setTitle","error","setError","onAddItem","trim","addItem","type","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","saveTitle","onDoubleClick","TodoList","jsxTasks","tasks","map","t","key","id","filter","isDone","checked","event","newIsDoneValue","changeStatus","newTitle","changeTasksTitle","removeTask","removeTodoList","addTask","changeFilter","App","todoListID1","v1","todoListID2","todoListID3","todoLists","setTodoLists","tasks__1","setTasks","todoListID","todoListTasks","todoList","find","tl","newTask","task","newTodoListID","allTasks","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2f874b4b.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype addItemFromType = {\r\n    addItem: (title: string) => void;\r\n}\r\n\r\nfunction AddItemFrom(props: addItemFromType) {\r\n\r\n    let [title, setTitle] = useState<string>('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n\r\n    const onAddItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n        setTitle('');\r\n\r\n    }\r\n\r\n\r\nconst onKeyPressItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    setError(null);\r\n    if (e.charCode === 13) {\r\n        onAddItem();\r\n    }\r\n}\r\nreturn (<div>\r\n\r\n    <input\r\n        type='text' value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressItem}\r\n        className={error ? \"error\" : \"\"}\r\n    />\r\n    <button onClick={onAddItem}>add</button>\r\n    {error && <div className={'error-message'}>{error}</div>}\r\n</div>\r\n)\r\n\r\n}\r\n\r\nexport default AddItemFrom;","import React, {useState,ChangeEvent} from 'react';\r\n\r\ntype EditableSpanType = {\r\n    title: string;\r\n    saveTitle: (newTitle:string) => void,\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title,setTitle] = useState(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const ofEditMode = () => {\r\n        setEditMode(false);\r\n        props.saveTitle(title);\r\n        setTitle('');\r\n    }\r\n\r\n    const changeTitle = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    return editMode ? <input value={title} autoFocus={true} onBlur={ofEditMode} onChange={changeTitle}/>\r\n    : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n\r\n\r\n}\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {filterValueType} from '../../App';\r\nimport AddItemFrom from '../../AddItemFrom';\r\nimport EditableSpan from '../../EditableSpan';\r\n\r\ntype TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n};\r\n\r\ntype TodoListPropsType = {\r\n    id: string;\r\n    title: string;\r\n    tasks: Array<TaskType>;\r\n    removeTask: (id: string, todoListID: string) => void;\r\n    changeFilter: (id: string, value: filterValueType) => void;\r\n    addTask: (title: string, todoListID: string) => void;\r\n    changeStatus: (id: string, isDone: boolean, todoListID: string) => void;\r\n    filter: filterValueType;\r\n    removeTodoList: (id: string) => void;\r\n    changeTasksTitle:(id:string,title:string,todoListID:string) => void;\r\n};\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    //хуки принимают значения string или null, в первом хуке стартовое значение пустая строка \"\",а втором Null\r\n    // let [title, setTitle] = useState<string>('');\r\n    // let [error, setError] = useState<string | null>(null);\r\n\r\n\r\n    let jsxTasks = props.tasks.map((t) => {\r\n\r\n        //берём значение у инпута  с помощью onChangeHandler\r\n        const onStatusChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = event.currentTarget.checked;\r\n            //t - это из параметров метода map ,это так таска которая будет отрисовываться ,и мы берём id этой таски\r\n            props.changeStatus(t.id, newIsDoneValue, props.id);\r\n        }\r\n\r\n        const onTitleChangeCallback = (newTitle:string) => {\r\n            props.changeTasksTitle(t.id,newTitle,props.id)\r\n        }\r\n\r\n        return (\r\n            <li key={t.id} className={props.filter !== \"all\" && t.isDone ? \"is-done\" : \"\"}>\r\n                <input type=\"checkbox\" checked={t.isDone} onChange={onStatusChangeHandler}\r\n                />\r\n                <EditableSpan title={t.title} saveTitle={onTitleChangeCallback}/>\r\n                <button\r\n                    onClick={() => {\r\n                        // alert(t.id);\r\n                        props.removeTask(t.id, props.id);\r\n                    }}\r\n                >\r\n                    x\r\n                </button>\r\n            </li>\r\n        );\r\n    })\r\n    // const onAddTasks = () => {\r\n    //     if (title.trim() !== \"\") {\r\n    //         props.addTask(title, props.id);\r\n    //         setTitle('');\r\n    //     } else {\r\n    //         setError('Title is required');\r\n    //     }\r\n    //     setTitle('');\r\n    //\r\n    // }\r\n\r\n    // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n    //\r\n    // const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     setError(null);\r\n    //     if (e.charCode === 13) {\r\n    //         onAddTasks();\r\n    //     }\r\n    // }\r\n\r\n    const onChangeAll = () => props.changeFilter(props.id, 'all');\r\n\r\n    const onChangeActive = () => props.changeFilter(props.id, 'active');\r\n\r\n    const onChangeCompleted = () => props.changeFilter(props.id, 'completed');\r\n\r\n    const createTaskTitle = (title:string) => {\r\n        props.addTask(title,props.id);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <button onClick={() => {\r\n                    props.removeTodoList(props.id)\r\n                }}>x\r\n                </button>\r\n            </h3>\r\n            <AddItemFrom addItem={createTaskTitle}/>\r\n\r\n\r\n            {/*<div>*/}\r\n\r\n            {/*    <input type='text' value={title} onChange={onChangeHandler} onKeyPress={onKeyPress}*/}\r\n            {/*           className={error ? \"error\" : \"\"}/>*/}\r\n            {/*    <button onClick={onAddTasks}>add</button>*/}\r\n            {/*    {error && <div className={'error-message'}>{error}</div>}*/}\r\n            {/*</div>*/}\r\n\r\n\r\n            <ul>\r\n                {jsxTasks}\r\n\r\n\r\n                {/*\r\n                <li><input type=\"checkbox\" checked={props.tasks[0].isDone}/> <span>{props.tasks[0].title}</span></li>\r\n                <li><input type=\"checkbox\" checked={props.tasks[1].isDone}/> <span>{props.tasks[1].title}</span></li>\r\n                <li><input type=\"checkbox\" checked={props.tasks[2].isDone}/> <span>{props.tasks[2].title}</span></li> */}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    onClick={onChangeAll}>All\r\n                </button>\r\n                <button onClick={onChangeActive} className={props.filter === \"active\" ? \"active-filter\" : \"\"}>Active\r\n                </button>\r\n                <button onClick={onChangeCompleted}\r\n                        className={props.filter === \"completed\" ? \"active-filter\" : \"\"}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport TodoList from \"./componets/Todolist/TodoList\";\r\nimport {v1} from 'uuid';\r\nimport AddItemFrom from './AddItemFrom';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    isDone: boolean,\r\n    title: string\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: filterValueType\r\n}\r\nexport type filterValueType = 'all' | 'active' | 'completed';\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListID1 = v1();\r\n    let todoListID2 = v1();\r\n    let todoListID3 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: 'Books', filter: 'all'},\r\n        {id: todoListID2, title: 'Songs', filter: 'active'},\r\n        {id: todoListID3, title: 'Songs', filter: 'completed'},\r\n    ]);\r\n\r\n    let [tasks__1, setTasks] = useState<TasksStateType>(\r\n        {\r\n            [todoListID1]: [\r\n                {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false},\r\n                {id: v1(), title: \"RestAPI\", isDone: false},\r\n                {id: v1(), title: \"GraphQL\", isDone: false},\r\n            ],\r\n            [todoListID2]: [\r\n                {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false},\r\n                {id: v1(), title: \"RestAPI\", isDone: false},\r\n                {id: v1(), title: \"GraphQL\", isDone: false},\r\n            ],\r\n            [todoListID3]: [\r\n                {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false},\r\n                {id: v1(), title: \"RestAPI\", isDone: false},\r\n                {id: v1(), title: \"GraphQL\", isDone: false},\r\n            ],\r\n\r\n        },\r\n    );\r\n\r\n    // let [filter, setFilter] = useState<filterValueType>('active');\r\n\r\n\r\n    // const tasks__1 = [\r\n    //   { id: 1, title: \"HTML&CSS\", isDone: true },\r\n    //   { id: 2, title: \"JS\", isDone: true },\r\n    //   { id: 3, title: \"ReactJS\", isDone: false },\r\n    //   { id: 4, title: \"RestAPI\", isDone: false },\r\n    //   { id: 5, title: \"GraphQL\", isDone: false },\r\n    //   // { is: 4, title: \"React\", isDone: false },\r\n    // ];\r\n\r\n\r\n    function removeTask(id: string, todoListID: string) {\r\n        let todoListTasks = tasks__1[todoListID];\r\n        tasks__1[todoListID] = todoListTasks.filter(t => t.id !== id);\r\n        setTasks({...tasks__1});\r\n\r\n        // let resultTasks = tasks__1.filter((t) => {\r\n        //   if (t.id !== id) {\r\n        //     return true;\r\n        //   } else {\r\n        //     return false;\r\n        //   }\r\n        // });\r\n    }\r\n\r\n    function changeFilter(id: string, value: filterValueType) {\r\n        let todoList = todoLists.find(tl => tl.id === id);\r\n        if (todoList) {\r\n            todoList.filter = value;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        let newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        };\r\n        let todoListTasks = tasks__1[todoListID];\r\n        tasks__1[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks__1});\r\n\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todoListID: string) {\r\n        let todoListTasks = tasks__1[todoListID];\r\n        let task = todoListTasks.find(task => task.id === id)\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks__1});\r\n        }\r\n    }\r\n\r\n    function removeTodoList(id: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== id));\r\n        //освобождаем место ,удаляем с объекта не нужный массив с данными\r\n        delete tasks__1[id];\r\n        setTasks({...tasks__1})\r\n\r\n\r\n    }\r\n\r\n    // let tasksForTodoList = tasks__1;\r\n    // if (filter === 'active') {\r\n    //     tasksForTodoList = tasks__1.filter(t => t.isDone === false)\r\n    // }\r\n    // if (filter === 'completed') {\r\n    //     tasksForTodoList = tasks__1.filter(t => t.isDone === true)\r\n    // }\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodoListID = v1();\r\n        let newTodoList: TodoListType = {\r\n\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: 'all',\r\n\r\n        }\r\n        setTodoLists([newTodoList, ...todoLists]);\r\n        setTasks({\r\n            ...tasks__1,\r\n            [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    function changeTasksTitle(id:string,title:string,todoListID:string) {\r\n        let todoListTasks = tasks__1[todoListID];\r\n        let task = todoListTasks.find(task => task.id === id);\r\n        if (task) {\r\n            task.title = title;\r\n            setTasks({...tasks__1})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemFrom addItem={addTodolist}/>\r\n            {todoLists.map(tl => {\r\n                let allTasks = tasks__1[tl.id]\r\n                let tasksForTodoList = allTasks;\r\n\r\n                if (tl.filter === 'active') {\r\n                    tasksForTodoList = allTasks.filter(t => t.isDone === false)\r\n                }\r\n                if (tl.filter === 'completed') {\r\n                    tasksForTodoList = allTasks.filter(t => t.isDone === true)\r\n                }\r\n                return (\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTasksTitle={changeTasksTitle}\r\n                    />\r\n                )\r\n            })}\r\n            {/*<TodoList*/}\r\n            {/*    title={\"What to learn\"}*/}\r\n            {/*    tasks={tasksForTodoList}*/}\r\n            {/*    removeTask={removeTask}*/}\r\n            {/*    changeFilter={changeFilter}*/}\r\n            {/*    addTask={addTask}*/}\r\n            {/*    changeStatus={changeStatus}*/}\r\n            {/*    filter={filter}*/}\r\n            {/*/>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}